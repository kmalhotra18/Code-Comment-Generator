# -*- coding: utf-8 -*-
"""Code_Comment_Generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1owCbppC9xu2yAnqTsy32OND6bEA7EDM6

A code **tool that automatically adds docstrings/comments** to your code

*   Add Gemini to Closed Source models
*   Try a few more Open Source models like CodeLlama and StarCoder
"""

!pip install -q OpenAI
!pip install -q google-generativeai
!pip install -q python-dotenv
!pip install -q anthropic
!pip install -q gradio

# Sign in to OpenAI using Secrets in Colab

import os
from openai import OpenAI

# Get the API key from the environment variable
openai_api_key = os.getenv('OPENAI_API_KEY')
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# If the API key is not found in the environment variable,
# try getting it from a .env file (if you're using one)
if openai_api_key is None:
    from dotenv import load_dotenv
    load_dotenv()
    openai_api_key = os.getenv('OPENAI_API_KEY')

# If the API key is still None, raise an error
if openai_api_key is None:
    raise ValueError("OPENAI_API_KEY environment variable not set. Please set it or create a .env file with the key.")

# Initialize the OpenAI client with the API key
openai = OpenAI(api_key=openai_api_key)

# imports

import os
import io
import sys
from dotenv import load_dotenv
from openai import OpenAI
import google.generativeai
import anthropic
from IPython.display import Markdown, display, update_display
import gradio as gr
import subprocess

# environment

load_dotenv(override=True)
os.environ['OPENAI_API_KEY'] = os.getenv('OPENAI_API_KEY', 'your-key-if-not-using-env')
os.environ['ANTHROPIC_API_KEY'] = os.getenv('ANTHROPIC_API_KEY', 'your-key-if-not-using-env')

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# initialize
# NOTE - option to use ultra-low cost models by uncommenting last 2 lines

openai = OpenAI()
claude = anthropic.Anthropic()
OPENAI_MODEL = "gpt-4o"
CLAUDE_MODEL = "claude-3-5-sonnet-20240620"

# Want to keep costs ultra-low? Uncomment these lines:
# OPENAI_MODEL = "gpt-4o-mini"
# CLAUDE_MODEL = "claude-3-haiku-20240307"

# Define function to call GPT-4o and comment the code

def generate_commented_code(code):
    system_prompt = (
        "You're a helpful assistant that comments Python code. "
        "Given any raw Python code, return the same code with meaningful docstrings and inline comments. "
        "Preserve formatting. Only return the modified code."
    )

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": code}
            ],
            temperature=0.3
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"Error: {str(e)}"

# Build Gradio UI

with gr.Blocks(title="GPT-4o Python Comment Generator") as app:
    gr.Markdown("## üß† GPT-4o: Auto-Comment Python Code")

    with gr.Tab("üìã Paste Code"):
        code_input = gr.Code(label="Paste your Python code here", language="python")

    with gr.Tab("üìÅ Upload File"):
        file_input = gr.File(label="Upload a .py file", file_types=[".py"])

    output = gr.Code(label="üîç Annotated Code", language="python")
    run_button = gr.Button("‚ú® Comment Code")

    def process_input(code, file):
        if code:
            return generate_commented_code(code)
        elif file is not None:
            content = file.read().decode("utf-8")
            return generate_commented_code(content)
        else:
            return "Please provide code via paste or upload."

    run_button.click(
        fn=process_input,
        inputs=[code_input, file_input],
        outputs=output
    )

app.launch()





